  // request access to the user's MetaMask account
  async function requestAccount() {
    await window.ethereum.request({ method: 'eth_requestAccounts' });
  }

  async function async_solveInstance() {
    if (typeof window.ethereum !== 'undefined') {
      await requestAccount()
      const provider = new ethers.providers.Web3Provider(window.ethereum);
      const signer = provider.getSigner()
      const contract = new ethers.Contract(generatorAddress, Generator.abi, signer);
      const transaction = await contract.solveInstance(user)
      await transaction.wait()
    }
  }

    async function async_setResearcher() {
      if (typeof window.ethereum !== 'undefined') {
        await requestAccount()
        const provider = new ethers.providers.Web3Provider(window.ethereum);
        const signer = provider.getSigner()
        const contract = new ethers.Contract(generatorAddress, Generator.abi, signer);
        const transaction = await contract.setResearcher(user)
        await transaction.wait()
      }
    }

    // -----------------------------------------
    async function async_createAInstance() {
      if (typeof window.ethereum !== 'undefined') {
        await requestAccount()
        const provider = new ethers.providers.Web3Provider(window.ethereum);
        const signer = provider.getSigner()
        const contract = new ethers.Contract(generatorAddress, Generator.abi, signer);
        const transaction = await contract.createAInstance(data,
          {
          gasLimit: 12000000
        })
        await transaction.wait()
      }
    }

    async function async_createBInstance() {
      if (typeof window.ethereum !== 'undefined') {
        await requestAccount()
        const provider = new ethers.providers.Web3Provider(window.ethereum);
        const signer = provider.getSigner()
        const contract = new ethers.Contract(generatorAddress, Generator.abi, signer);
        const transaction = await contract.createBInstance({
          gasLimit: 12000000
        })
        await transaction.wait()
      }
    }

    async function async_getInstance() {
      if (typeof window.ethereum !== 'undefined') {
        const provider = new ethers.providers.Web3Provider(window.ethereum)
        const contract = new ethers.Contract(generatorAddress, Generator.abi, provider);
        try {
          const signer = provider.getSigner()
          const result = await contract.connect(signer).getInstance()
          let startDate = new Date(parseInt(result[3]._hex.slice(2), 16)*1000);
          let endDate = new Date(parseInt(result[5]._hex.slice(2), 16)*1000);         
          let arrayData = [
            result[1], 
            startDate.getFullYear() + "/" + startDate.getMonth() + "/" + startDate.getDate()  + " " + startDate.getHours() + ":" + startDate.getMinutes() + ":" + startDate.getSeconds(),
            result[4], 
            endDate.getFullYear() + "/" + endDate.getMonth() + "/" + endDate.getDate()  + " " + endDate.getHours() + ":" + endDate.getMinutes() + ":" + endDate.getSeconds()
          ]
          setData(arrayData)
          console.log(arrayData)
        } catch (err) {
          console.log("Error: ", err)
        }
      }    
    }