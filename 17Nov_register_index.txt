import { React, useState, useEffect } from 'react';
import { useForm } from 'react-hook-form';
import { generatorAddress, requestAccount } from '../../App.js';
import { ethers } from 'ethers';
import Generator from '../../artifacts/contracts/Generator.sol/Generator.json';
import { 
    Container, 
    Form, 
    FormButton,
    FormError,
    FormInput, 
    FormWrap,
    FormH1,
    FormLabel,
    FormContent
 } from './RegisterElements';

const Register = () => {
    async function async_setResearcher(data) {
        if (typeof window.ethereum !== 'undefined') {
          await requestAccount()
          const provider = new ethers.providers.Web3Provider(window.ethereum);
          const signer = provider.getSigner()
          const contract = new ethers.Contract(generatorAddress, Generator.abi, signer);
          console.log("async_setResearcher: " + data.firstName, data.age);
          const transaction = await contract.setResearcher(
            data.firstName, 
            data.age,
            {gasLimit: 12000000})
          await transaction.wait()
        }
    }

    const {
        register,
        handleSubmit,
        watch,
        formState: { errors }
      } = useForm();
    
    return ( 
        <>
            <Container>
                <FormWrap>
                    <FormContent>
                        <Form onSubmit={handleSubmit(async_setResearcher)}>
                            <FormH1>Register your information</FormH1>
                            <FormLabel>Name</FormLabel>
                            <FormInput
                                {...register("firstName", {
                                required: true,
                                maxLength: 20,
                                pattern: /^[A-Za-z]+$/i
                                })} />
                                {errors?.firstName?.type === "required" && <FormError>This field is required</FormError>}
                                {errors?.firstName?.type === "maxLength" && (<FormError>First name cannot exceed 20 characters</FormError>)}
                                {errors?.firstName?.type === "pattern" && (<FormError>Alphabetical characters only</FormError>)}
                            <FormLabel>ORCID</FormLabel>
                            <FormInput {...register("age", { 
                                required: true,
                                minLength: 16, 
                                maxLength: 16,
                                pattern: /^[0-9\b]+$/
                            })} />
                                {errors?.age?.type === "required" && <FormError>This field is required</FormError>}
                                {errors?.age?.type == "minLength" && <FormError>It must be a number of 16 digits</FormError> }
                                {errors?.age?.type == "maxLength" && <FormError>It must be a number of 16 digits</FormError> }
                                {errors?.age?.type === "pattern" && <FormError>Numerical characters only</FormError> }
                            <FormButton type="submit" to='/user'/>
                        </Form>
                    </FormContent>
                </FormWrap>
            </Container>
        </>
    )
}

export default Register;